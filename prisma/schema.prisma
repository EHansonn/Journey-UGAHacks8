// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  value String @id @unique
  users User[]
}

model Hobby {
  value String          @id @unique
  users HobbiesOnUser[]
}

model HobbiesOnUser {
  user      User   @relation(fields: [userId], references: [id])
  hobby     Hobby  @relation(fields: [hobbyName], references: [value])
  userId    String
  hobbyName String

  @@id([hobbyName, userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  // pfp           String?
  bio           String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  trips         Trip[]
  sessions      Session[]
  accounts      Account[]
  pictures      Picture[]
  job           Job?            @relation(fields: [jobName], references: [value])
  jobName       String?
  hobbies       HobbiesOnUser[]
}

model Picture {
  id     String @id @default(cuid())
  url    String
  desc   String
  owner  User   @relation(fields: [userId], references: [id])
  trip   Trip   @relation(fields: [tripId], references: [id])
  userId String
  tripId String
}

model Trip {
  id       String    @id @default(cuid())
  owner    User      @relation(fields: [userId], references: [id])
  userId   String
  location String
  lat      Float
  lon      Float
  date     DateTime
  desc     String
  pictures Picture[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
